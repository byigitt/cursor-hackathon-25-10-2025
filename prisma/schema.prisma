generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]

    // --- Application-specific relations ---
    decks         Deck[]
    quizAttempts  QuizAttempt[]
    streak        Streak?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ==========================================
// Application-Specific Models
// ==========================================

// CORE: Deck and Study
model Deck {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    documents    Document[]
    studySession StudySession?
    quizzes      Quiz[]
    flashcards   Flashcard[]

    @@index([userId])
}

model Document {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    name      String
    fileUrl   String   // UploadThing CDN URL
    fileKey   String   // UploadThing file key for deletion
    fileType  String   // pdf, txt, doc, docx
    fileSize  Int      // File size in bytes
    deckId    String
    deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)

    @@index([deckId])
}

model StudySession {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    summary      String   @db.Text
    rsvpSpeedWPM Int      @default(300)
    deckId       String   @unique
    deck         Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
}

// CORE: Quiz
model Quiz {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    deckId       String
    deck         Deck        @relation(fields: [deckId], references: [id], onDelete: Cascade)
    questions    Question[]
    quizAttempts QuizAttempt[]

    @@index([deckId])
}

model Question {
    id           String  @id @default(cuid())
    questionText String
    quizId       String
    quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    options      Option[]
    userAnswers  UserAnswer[]

    @@index([quizId])
}

model Option {
    id         String  @id @default(cuid())
    optionText String
    isCorrect  Boolean @default(false)
    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    userAnswers UserAnswer[]

    @@index([questionId])
}

model QuizAttempt {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    score     Float
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    quizId    String
    quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers   UserAnswer[]

    @@index([userId, quizId])
}

model UserAnswer {
    id               String @id @default(cuid())
    quizAttemptId    String
    quizAttempt      QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
    questionId       String
    question         Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
    selectedOptionId String
    selectedOption   Option      @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@unique([quizAttemptId, questionId])
}

// OPTIONAL: Gamification
model Streak {
    id               String   @id @default(cuid())
    currentStreak    Int      @default(0)
    longestStreak    Int      @default(0)
    lastActivityDate DateTime
    userId           String   @unique
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// OPTIONAL: Flashcards
model Flashcard {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    frontText String
    backText  String
    deckId    String
    deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)

    @@index([deckId])
}
